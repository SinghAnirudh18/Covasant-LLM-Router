<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>LLM Router - Debug</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        :root {
            --bg-primary: #0a0a0a;
            --bg-secondary: #1a1a1a;
            --bg-tertiary: #2a2a2a;
            --text-primary: #ffffff;
            --text-secondary: #b0b0b0;
            --accent-primary: #00d4ff;
            --accent-secondary: #ff6b6b;
            --border-color: #333333;
            --shadow: 0 4px 20px rgba(0, 0, 0, 0.3);
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: var(--bg-primary);
            color: var(--text-primary);
            overflow-x: hidden;
        }

        .bg-orbs {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            pointer-events: none;
            z-index: 0;
        }

        .orb {
            position: absolute;
            border-radius: 50%;
            background: radial-gradient(circle, rgba(0, 212, 255, 0.1) 0%, transparent 70%);
            animation: float 6s ease-in-out infinite;
        }

        .orb:nth-child(1) {
            width: 300px;
            height: 300px;
            top: 10%;
            left: 10%;
            animation-delay: 0s;
        }

        .orb:nth-child(2) {
            width: 200px;
            height: 200px;
            top: 60%;
            right: 15%;
            animation-delay: -2s;
        }

        .orb:nth-child(3) {
            width: 400px;
            height: 400px;
            bottom: 10%;
            left: 50%;
            animation-delay: -4s;
        }

        @keyframes float {
            0%, 100% { transform: translateY(0px) rotate(0deg); }
            50% { transform: translateY(-20px) rotate(180deg); }
        }

        .app-container {
            position: relative;
            z-index: 1;
            display: flex;
            height: 100vh;
        }

        .sidebar {
            width: 60px;
            background: var(--bg-secondary);
            border-right: 1px solid var(--border-color);
            display: flex;
            flex-direction: column;
            align-items: center;
            padding: 20px 0;
        }

        .logo {
            margin-bottom: 30px;
        }

        .logo-icon {
            width: 40px;
            height: 40px;
            background: linear-gradient(135deg, var(--accent-primary), var(--accent-secondary));
            border-radius: 10px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 20px;
            color: white;
        }

        .nav-items {
            display: flex;
            flex-direction: column;
            gap: 15px;
        }

        .nav-item {
            width: 40px;
            height: 40px;
            background: var(--bg-tertiary);
            border-radius: 8px;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            transition: all 0.3s ease;
            position: relative;
        }

        .nav-item:hover {
            background: var(--accent-primary);
            transform: scale(1.1);
        }

        .nav-item.active {
            background: var(--accent-primary);
            box-shadow: 0 0 20px rgba(0, 212, 255, 0.3);
        }

        .main-content {
            flex: 1;
            display: flex;
            flex-direction: column;
            background: var(--bg-primary);
        }

        .header {
            height: 60px;
            background: var(--bg-secondary);
            border-bottom: 1px solid var(--border-color);
            display: flex;
            align-items: center;
            padding: 0 20px;
        }

        .header-content {
            display: flex;
            justify-content: space-between;
            align-items: center;
            width: 100%;
        }

        .brand-name {
            font-size: 24px;
            font-weight: 700;
            background: linear-gradient(135deg, var(--accent-primary), var(--accent-secondary));
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
        }

        .status-indicator {
            display: flex;
            align-items: center;
            gap: 8px;
            font-size: 12px;
            color: var(--text-secondary);
        }

        .status-dot {
            width: 8px;
            height: 8px;
            background: #00ff88;
            border-radius: 50%;
            animation: pulse 2s infinite;
        }

        @keyframes pulse {
            0% { opacity: 1; }
            50% { opacity: 0.5; }
            100% { opacity: 1; }
        }

        .chat-container {
            flex: 1;
            display: flex;
            flex-direction: column;
            overflow: hidden;
        }

        .chat-window {
            flex: 1;
            overflow-y: auto;
            padding: 20px;
            display: flex;
            flex-direction: column;
        }

        .conversation-area {
            flex: 1;
            display: flex;
            flex-direction: column;
            gap: 15px;
        }

        .empty-state {
            flex: 1;
            display: flex;
            align-items: center;
            justify-content: center;
            text-align: center;
            color: var(--text-secondary);
        }

        .empty-icon img {
            width: 200px;
            height: 200px;
            opacity: 0.7;
        }

        .message {
            display: flex;
            align-items: flex-start;
            gap: 12px;
            margin-bottom: 15px;
        }

        .message.user {
            flex-direction: row-reverse;
        }

        .message-avatar {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 18px;
            flex-shrink: 0;
        }

        .message.user .message-avatar {
            background: linear-gradient(135deg, var(--accent-primary), var(--accent-secondary));
            color: white;
        }

        .message.assistant .message-avatar {
            background: var(--bg-tertiary);
            color: var(--accent-primary);
        }

        .message-contrast {
            max-width: 70%;
            background: var(--bg-secondary);
            border: 1px solid var(--border-color);
            border-radius: 15px;
            padding: 15px;
            position: relative;
        }

        .message.user .message-contrast {
            background: linear-gradient(135deg, var(--accent-primary), var(--accent-secondary));
        }

        .message-text {
            line-height: 1.6;
            word-wrap: break-word;
        }

        .message-text strong {
            color: var(--accent-primary);
        }

        .message-text code {
            background: var(--bg-tertiary);
            padding: 2px 6px;
            border-radius: 4px;
            font-family: 'Courier New', monospace;
        }

        .timestamp {
            font-size: 11px;
            color: var(--text-secondary);
            margin-top: 5px;
        }

        .model-info {
            display: flex;
            gap: 10px;
            font-size: 12px;
            color: var(--text-secondary);
        }

        .typing-indicator {
            display: none;
            align-items: center;
            gap: 10px;
            color: var(--text-secondary);
            font-size: 14px;
            margin: 15px 0;
        }

        .typing-dots {
            display: flex;
            gap: 4px;
        }

        .typing-dot {
            width: 6px;
            height: 6px;
            background: var(--accent-primary);
            border-radius: 50%;
            animation: typingDot 1.4s infinite;
        }

        .typing-dot:nth-child(2) { animation-delay: 0.2s; }
        .typing-dot:nth-child(3) { animation-delay: 0.4s; }

        @keyframes typingDot {
            0%, 60%, 100% { transform: scale(0.8); opacity: 0.5; }
            30% { transform: scale(1); opacity: 1; }
        }

        .input-container {
            padding: 20px;
            background: var(--bg-secondary);
            border-top: 1px solid var(--border-color);
        }

        .input-wrapper {
            max-width: 800px;
            margin: 0 auto;
        }

        .input-form {
            display: flex;
            align-items: flex-end;
            gap: 10px;
            background: var(--bg-tertiary);
            border: 1px solid var(--border-color);
            border-radius: 15px;
            padding: 10px;
        }

        .message-input {
            flex: 1;
            background: transparent;
            border: none;
            color: var(--text-primary);
            font-size: 16px;
            resize: none;
            min-height: 24px;
            max-height: 120px;
            overflow-y: auto;
            outline: none;
        }

        .message-input::placeholder {
            color: var(--text-secondary);
        }

        .send-button {
            width: 40px;
            height: 40px;
            background: linear-gradient(135deg, var(--accent-primary), var(--accent-secondary));
            border: none;
            border-radius: 50%;
            color: white;
            font-size: 16px;
            cursor: pointer;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .send-button:hover {
            transform: scale(1.1);
            box-shadow: 0 0 20px rgba(0, 212, 255, 0.3);
        }

        .send-button:disabled {
            opacity: 0.5;
            cursor: not-allowed;
            transform: none;
        }

        .send-button.loading {
            animation: spin 1s linear infinite;
        }

        @keyframes spin {
            from { transform: rotate(0deg); }
            to { transform: rotate(360deg); }
        }

        .debug-info {
            background: var(--bg-tertiary);
            border: 1px solid var(--border-color);
            border-radius: 8px;
            padding: 10px;
            margin: 10px 0;
            font-family: monospace;
            font-size: 12px;
            color: var(--text-secondary);
        }

        .error-message {
            background: rgba(255, 107, 107, 0.1);
            border: 1px solid var(--accent-secondary);
            color: var(--accent-secondary);
            padding: 10px;
            border-radius: 8px;
            margin: 10px 0;
        }
        .thinking-text {
    color: #888;
    font-style: italic;
    background: rgba(255, 255, 255, 0.03);
    border-left: 3px solid #555;
    padding: 8px 12px;
    margin: 10px 0;
    font-size: 0.85em;
    overflow-x: auto;
    white-space: pre-wrap;
    border-radius: 6px;
    max-height: 150px;
    overflow-y: auto;
}

    </style>
</head>

<body>
    <div class="bg-orbs">
        <div class="orb"></div>
        <div class="orb"></div>
        <div class="orb"></div>
    </div>

    <div class="app-container">
        <!-- Sidebar Navigation -->
        <div class="sidebar">
            <div class="logo">
                <div class="logo-icon">
                    <i class="fas fa-brain"></i>
                </div>
            </div>
            
            <div class="nav-items">
                <div class="nav-item active" data-tooltip="Chat">
                    <i class="fas fa-comments"></i>
                </div>
                <div class="nav-item" data-tooltip="History">
                    <i class="fas fa-history"></i>
                </div>
                <!-- <div class="nav-item" data-tooltip="Settings">
                    <i class="fas fa-cog"></i>
                </div> -->
                <div class="nav-item" data-tooltip="Analytics">
                    <i class="fas fa-chart-line"></i>
                </div>
                <div class="nav-item" data-tooltip="Feedback">
                    <i class="fas fa-star"></i>
                </div>
            </div>
        </div>

        <!-- Main Content -->
        <div class="main-content">
            <!-- Header -->
            <div class="header">
                <div class="header-content">
                    <div class="header-title">
                        <div class="brand-name">LLM Router</div>
                    </div>
                    <div class="header-actions">
                        <div class="status-indicator">
                            <div class="status-dot"></div>
                            <span>ONLINE</span>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Chat Area -->
            <div class="chat-container">
                <div class="chat-window" id="chatWindow">
                    <div class="conversation-area" id="conversationArea">
                        <div class="empty-state" id="emptyState">
                            <div class="empty-icon">
                                <i class="fas fa-robot" style="font-size: 100px; color: var(--accent-primary);"></i>
                            </div>
                        </div>
                    </div>

                    <div class="typing-indicator" id="typingIndicator">
                        <i class="fas fa-robot"></i>
                        <span>AI is analyzing</span>
                        <div class="typing-dots">
                            <div class="typing-dot"></div>
                            <div class="typing-dot"></div>
                            <div class="typing-dot"></div>
                        </div>
                    </div>
                </div>

                <!-- Input Area -->
                <div class="input-container">
                    <div class="input-wrapper">
                        <form class="input-form" id="chatForm">
                            <textarea 
                                class="message-input" 
                                id="messageInput"
                                placeholder="Enter your message and let LLM Router route it intelligently..."
                                rows="1"
                                required
                            ></textarea>
                            <button type="submit" class="send-button" id="sendButton">
                                <i class="fas fa-paper-plane"></i>
                            </button>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <script>
document.addEventListener("DOMContentLoaded", () => {
    const messageInput = document.getElementById('messageInput');
    const chatForm = document.getElementById('chatForm');
    const sendButton = document.getElementById('sendButton');
    const conversationArea = document.getElementById('conversationArea');
    const typingIndicator = document.getElementById('typingIndicator');
    const chatWindow = document.getElementById('chatWindow');
    const emptyState = document.getElementById('emptyState');

    const promptModelMap = {}; // Unique container per prompt+model

   function formatChunk(chunk) {
    if (!chunk) return '';

    // Escape HTML
    chunk = chunk
        .replace(/&/g, "&amp;")
        .replace(/</g, "&lt;")
        .replace(/>/g, "&gt;");
    
    return chunk
        .replace(/^### (.*$)/gim, '<h3>$1</h3>')
        .replace(/^## (.*$)/gim, '<h2>$1</h2>')
        .replace(/^# (.*$)/gim, '<h1>$1</h1>')
        .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')        // Bold
        .replace(/\*(.*?)\*/g, '<em>$1</em>')                    // Italic (asterisks)
        .replace(/_(.*?)_/g, '<em>$1</em>')                      // Italic (underscores)
        .replace(/~~(.*?)~~/g, '<del>$1</del>')                  // Strikethrough
        .replace(/`([^`]+)`/g, '<code>$1</code>')                // Inline code
        .replace(/\[(.*?)\]\((.*?)\)/g, '<a href="$2" target="_blank">$1</a>') // Links
        .replace(/^> (.*$)/gim, '<blockquote>$1</blockquote>')   // Blockquotes
        .replace(/\n/g, '<br>');                                 // New lines
}


    function appendStreamChunk(containerId, chunk) {
        const el = document.getElementById(containerId);
        if (!el) return;
        const streamText = el.querySelector('.stream-text');
        if (streamText) {
            streamText.innerHTML += formatChunk(chunk);
            chatWindow.scrollTop = chatWindow.scrollHeight;
        }
    }

    // Allow Enter to send, Shift+Enter for newline
    messageInput.addEventListener('keydown', function (e) {
        if (e.key === 'Enter' && !e.shiftKey) {
            e.preventDefault();
            chatForm.dispatchEvent(new Event('submit'));
        }
    });

    // Auto-resize textarea
    messageInput.addEventListener('input', function () {
        this.style.height = 'auto';
        this.style.height = this.scrollHeight + 'px';
    });

    chatForm.addEventListener('submit', function (e) {
        e.preventDefault();
        const prompt = messageInput.value.trim();
        if (!prompt) return;

        if (emptyState) emptyState.style.display = 'none';

        // Add user message
        const userDiv = document.createElement('div');
        userDiv.className = 'message user';
        userDiv.innerHTML = `
            <div class="message-avatar"><i class="fas fa-user"></i></div>
            <div class="message-contrast">
                <div class="message-text">${formatChunk(prompt)}</div>
            </div>
            <div class="timestamp">${new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}</div>
        `;
        conversationArea.appendChild(userDiv);

        // Clear input
        messageInput.value = '';
        messageInput.style.height = 'auto';
        sendButton.disabled = true;
        sendButton.classList.add('loading');
        typingIndicator.style.display = 'flex';

        const eventSource = new EventSource(`/evaluate?prompt=${encodeURIComponent(prompt)}`);

        promptModelMap[prompt] = {};

        eventSource.onmessage = (event) => {
            try {
                const data = JSON.parse(event.data);
                const model = data.model || 'default';
                const chunk = data.chunk || '';

                // Unique container per prompt+model
                if (!promptModelMap[prompt][model]) {
                    const containerId = `stream-${model}-${Date.now()}-${Math.random().toString(36).substring(2, 6)}`;
                    promptModelMap[prompt][model] = containerId;

                    const assistantDiv = document.createElement('div');
                    assistantDiv.className = 'message assistant';
                    assistantDiv.id = containerId;
                    assistantDiv.innerHTML = `
                        <div class="message-avatar"><i class="fas fa-robot"></i></div>
                        <div class="message-contrast">
                            <div class="message-text">
                                <div style="font-weight:600; color: var(--accent-primary); margin-bottom: 10px;">
                                    <i class="fas fa-microchip"></i> ${model.toUpperCase()}
                                </div>
                                <div class="stream-text"></div>
                                <div class="model-meta" style="margin-top: 12px; font-size: 0.8rem;"></div>
                            </div>
                        </div>
                        <div class="timestamp">${new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}</div>
                    `;
                    conversationArea.appendChild(assistantDiv);
                }

                const containerId = promptModelMap[prompt][model];
                appendStreamChunk(containerId, chunk);
            } catch (err) {
                console.error("Error parsing chunk:", err);
            }
        };

        eventSource.addEventListener('model-done', (event) => {
            try {
                const data = JSON.parse(event.data);
                const containerId = promptModelMap[prompt][data.model];
                if (containerId) {
                    const assistantDiv = document.getElementById(containerId);
                    const metaDiv = assistantDiv.querySelector('.model-meta');
                    if (metaDiv) {
                        metaDiv.innerHTML = `
                            <div class="model-info">
                                <span><i class="fas fa-stopwatch"></i> ${data.latencyMs.toFixed(2)}ms</span> |
                                <span><i class="fas fa-check-circle"></i> Accuracy: ${(data.accuracy * 100).toFixed(1)}%</span>
                            </div>
                        `;
                    }
                }
            } catch (err) {
                console.error("Error parsing model-done:", err);
            }
        });

        eventSource.addEventListener('done', () => {
            typingIndicator.style.display = 'none';
            sendButton.disabled = false;
            sendButton.classList.remove('loading');
            eventSource.close();
        });

        eventSource.onerror = (err) => {
            typingIndicator.style.display = 'none';
            sendButton.disabled = false;
            sendButton.classList.remove('loading');
            eventSource.close();

            const errorDiv = document.createElement('div');
            errorDiv.className = 'message assistant';
            errorDiv.innerHTML = `
                <div class="message-avatar"><i class="fas fa-exclamation-triangle"></i></div>
                <div class="message-contrast">
                    <div class="message-text" style="color: var(--accent-secondary);">
                        <strong>Connection Error:</strong> Check if backend is running and reachable.
                    </div>
                </div>
                <div class="timestamp">${new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}</div>
            `;
            conversationArea.appendChild(errorDiv);
        };

        chatWindow.scrollTop = chatWindow.scrollHeight;
    });
});
</script>

</body>
</html>